name: Github Actions
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  frontend:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:23.0-dind
    steps:
      - uses: actions/checkout@v3      
      - name: Prepare env files
        run: |
          echo -n "OPEN_API_KEY=MY_FAKE_APIKEY" > backend/.env
          echo -n "MAX_TOKENS=1000" >> backend/.env
          echo -n "CORS_ORIGINS=http://localhost:3000" >> backend/.env
          echo -n "REACT_APP_API_URL=http://localhost:5000/" > frontend/.env
      
      - name: Build the Docker image
        run: |
          docker-compose -f docker-compose.ci.yml build front-fast-gpt
      
      - name: Test frontend container
        run: |
          docker-compose -f docker-compose.ci.yml run --rm front-fast-gpt npm run test:coverage
      
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v3
        with:
          name: Frontend coverage
          path: frontend_coverage
      
  backend:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.8-dind
    steps:
      - uses: actions/checkout@v3

      - name: Prepare env files
        run: |
          echo -n "OPEN_API_KEY=MY_FAKE_APIKEY" > backend/.env
          echo -n "MAX_TOKENS=1000" >> backend/.env
          echo -n "CORS_ORIGINS=http://localhost:3000" >> backend/.env
          echo -n "REACT_APP_API_URL=http://localhost:5000/" > frontend/.env

      - name: Build the Docker image
        run: |
          docker-compose -f docker-compose.ci.yml build back-fast-gpt

      - name: Python linting
        run: |
          docker-compose -f docker-compose.ci.yml run --rm back-fast-gpt ruff .
          docker-compose -f docker-compose.ci.yml run --rm back-fast-gpt isort .
          docker-compose -f docker-compose.ci.yml run --rm back-fast-gpt black .

      - name: Test backend container
        run: |
          docker-compose -f docker-compose.ci.yml run --rm back-fast-gpt pytest --cov=. --cov-report html

      - name: Upload backend coverage
        uses: actions/upload-artifact@v3
        with:
          name: Backend coverage
          path: backend_coverage

  DockerPush:
    runs-on: ubuntu-latest
    needs:  [frontend, backend]

    services:
      docker:
        image: docker:20.10.8-dind
    steps:
      - uses: actions/checkout@v3
      - name: Prepare env files
        run: |
          echo -n "OPEN_API_KEY=<yourapiykey>" > backend/.env
          echo -n "MAX_TOKENS=1000" >> backend/.env
          echo -n "CORS_ORIGINS=http://localhost:3000" >> backend/.env
          echo -n "REACT_APP_API_URL=http://localhost:5000/" > frontend/.env
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker Compose
        run: |
          docker-compose -f docker-compose.prod.yml build
          docker-compose -f docker-compose.prod.yml push

      - name: Update remote server compose image
        run: |
          docker-compose -f docker-compose.prod.yml build
          docker-compose -f docker-compose.prod.yml push

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.41.0/trivy_0.41.0_Linux-64bit.deb
          sudo apt install -y ./trivy_0.41.0_Linux-64bit.deb

      - name: Scan Docker image for vulnerabilities
        run: |
          trivy image --ignore-unfixed --severity HIGH iocio005/back-fast-gpt-prod:latest
          trivy image --ignore-unfixed --severity HIGH iocio005/front-fast-gpt-prod:latest

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan 20.124.2.0 > ~/.ssh/known_hosts

      - name: Deploy code
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@20.124.2.0 "./deploy.sh"